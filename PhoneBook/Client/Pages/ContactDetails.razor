@page "/contact"
@page "/contact/{id:int}"
@inject IPrivateContactService PrivateContactService
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]

@if (Id == null)
{
    <PageTitle>Create a new Contact</PageTitle>
    <h3>Create a new Contact</h3>
}
else
{
    <PageTitle>Edit @contact.FirstName @contact.LastName</PageTitle>
    <h3>Edit @contact.FirstName @contact.LastName</h3>
}

<EditForm Model="contact" OnSubmit="HandleSubmit">
    <div>
        <label for="firstname">First Name</label>
        <InputText id="firstname" @bind-Value="contact.FirstName" class="form-control"></InputText>
    </div>
    <div>
        <label for="lastname">Last Name</label>
        <InputText id="lastname" @bind-Value="contact.LastName" class="form-control"></InputText>
    </div>
    <div>
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="contact.Email" class="form-control"></InputText>
    </div>
    <div>
        <label for="phonenumber">Phone Number</label>
        <InputText id="phonenumber" @bind-Value="contact.PhoneNumber" class="form-control"></InputText>
    </div>
    <div>
        <label for="birthdate">Birth Date</label>
        <InputDate id="birthdate" @bind-Value="contact.BirthDate" class="form-control"></InputDate>
    </div>
    <div>
        <label for="category">Category</label><br />
        <InputSelect @bind-Value="selectedCategoryId" class="form-select" @onclick="SetCategory">
            <option value="">-- Select Category --</option>
            @foreach (var category in PrivateContactService.Categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
    </div>

    @if (selectedCategoryName == "służbowy")
    {
        <div id="subcategory">
            <label for="subcategory">Subcategory</label><br />
            <InputSelect @bind-Value="contact.SubcategoryId" class="form-select">
                <option value="">-- Select Subcategory --</option>
                @foreach (var subcategory in PrivateContactService.Subcategories)
                {
                    <option value="@subcategory.Id">@subcategory.Name</option>
                }
            </InputSelect>
        </div>
    }
    else if (selectedCategoryName == "inny")
    {
        <div id="usercategory">
            <label for="usercategory">Other category</label><br />
            <InputText id="usercategory" @bind-Value="customCategory" class="form-control"></InputText>
        </div>
    }
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteContact">Delete Contact</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    Contact contact = new Contact { Category = new Category(), Subcategory = new Subcategory(), UserCategory = new UserCategory() };

    private int selectedCategoryId;
    private string? selectedCategoryName;
    private string? customCategory;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            btnText = Id == null ? "Save New Contact" : "Update Contact";
            await PrivateContactService.GetCategories();
            await PrivateContactService.GetSubcategories();
            await PrivateContactService.GetUserCategories();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            contact = await PrivateContactService.GetContact((int)Id);
        }
    }

    protected async Task SetCategory()
    {
        if (selectedCategoryId != 0)
        {
            contact.CategoryId = await Task.FromResult(selectedCategoryId);
            selectedCategoryName = PrivateContactService.Categories.FirstOrDefault(c => c.Id == selectedCategoryId)?.Name;
        }
    }

    protected async Task SetUserCategory()
    {
        if(selectedCategoryName == "inny")
        {
            if(customCategory != null)
            {
                try
                {
                    await PrivateContactService.CreateNewCategory(new UserCategory{Name=customCategory});
                }
                catch(Exception e)
                {
                    throw new Exception("Błąd tworzenia nowej kategorii. " + e);
                }
            }
            else
            {
                throw new Exception("user category field can't be empty");
            }
        }
        else
        {
            
        }
    }

    async Task HandleSubmit()
    {
        await SetUserCategory();
        if (Id == null)
        {
            await PrivateContactService.CreateContact(contact);
        }
        else
        {
            await PrivateContactService.UpdateContact(contact);
        }
    }

    async Task DeleteContact()
    {
        await PrivateContactService.DeleteContact(contact.Id);
    }
}