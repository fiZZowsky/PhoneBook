@page "/contact"
@page "/contact/{id:int}"
@inject IPrivateContactService PrivateContactService
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]

@if (Id == null)
{
    <PageTitle>Create a new Contact</PageTitle>
    <h3>Create a new Contact</h3>
}
else
{
    <PageTitle>Edit @contact.FirstName @contact.LastName</PageTitle>
    <h3>Edit @contact.FirstName @contact.LastName</h3>
}

<div class="justify-content-start">
    <div class="col-md-6">
        <EditForm Model="contact" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label for="firstname">First Name</label>
                <InputText id="firstname" @bind-Value="contact.FirstName" class="form-control"></InputText>
                <ValidationMessage For="@(() => contact.FirstName)" />
            </div>
            <div class="mb-3">
                <label for="lastname">Last Name</label>
                <InputText id="lastname" @bind-Value="contact.LastName" class="form-control"></InputText>
                <ValidationMessage For="@(() => contact.LastName)" />
            </div>
            <div class="mb-3">
                <label for="email">Email</label>
                <InputText id="email" @bind-Value="contact.Email" class="form-control"></InputText>
                <ValidationMessage For="@(() => contact.Email)" />
            </div>
            <div class="mb-3">
                <label for="phonenumber">Phone Number</label>
                <InputText id="phonenumber" @bind-Value="contact.PhoneNumber" class="form-control"></InputText>
                <ValidationMessage For="@(() => contact.PhoneNumber)" />
            </div>
            <div class="mb-3">
                <label for="birthdate">Birth Date</label>
                <InputDate id="birthdate" @bind-Value="contact.BirthDate" class="form-control"></InputDate>
                <ValidationMessage For="@(() => contact.BirthDate)" />
            </div>
            <div class="mb-3">
                <label for="category">Category</label><br />
                <InputSelect @bind-Value="selectedCategoryId" class="form-select" @onclick="SetCategory">
                    <option value="">-- Select Category --</option>
                    @foreach (var category in PrivateContactService.Categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => contact.CategoryId)" />
            </div>

            @if (selectedCategoryName == "służbowy")
            {
                <div id="subcategory" class="mb-3">
                    <label for="subcategory">Subcategory</label><br />
                    <InputSelect @bind-Value="contact.SubcategoryId" class="form-select">
                        <option value="">-- Select Subcategory --</option>
                        @foreach (var subcategory in PrivateContactService.Subcategories)
                        {
                            <option value="@subcategory.Id">@subcategory.Name</option>
                        }
                    </InputSelect>
                </div>
            }
            else if (selectedCategoryName == "inny")
            {
                <div id="usercategory" class="mb-3">
                    <label for="usercategory">Other category</label><br />
                    <InputText id="usercategory" @bind-Value="customCategory" class="form-control"></InputText>
                </div>
            }
            <br class="mb-3">
            <button type="submit" class="btn btn-primary">
                @if (btnText == "Save New Contact")
                {
                    <span class="oi oi-plus pe-1"></span>
                }
                else
                {
                    <span class="oi oi-loop-circular pe-1"></span>
                }
                @btnText
            </button>
            @if (Id != null)
            {
                <span class="ms-2">
                    <button type="button" class="btn btn-danger" @onclick="DeleteContact"><span class="oi oi-trash pe-1"></span>Delete Contact</button>
                </span>
            }
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    Contact contact = new Contact { Category = new Category(), Subcategory = new Subcategory(), UserCategory = new UserCategory() };

    private int selectedCategoryId;
    private string? selectedCategoryName;
    private string? customCategory;
    private int? customCategoryId;
    private int? createdCustomCategoryId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            btnText = Id == null ? "Save New Contact" : "Update Contact";
            await PrivateContactService.GetCategories();
            await PrivateContactService.GetSubcategories();
            await PrivateContactService.GetUserCategories();

            if (Id != null)
            {
                // Set value of existing category and user category of the contact
                contact = await PrivateContactService.GetContact((int)Id);
                selectedCategoryId = contact.CategoryId;
                selectedCategoryName = PrivateContactService.Categories.FirstOrDefault(c => c.Id == selectedCategoryId)?.Name;
                if (selectedCategoryName == "inny")
                {
                    customCategoryId = contact.UserCategoryId;
                    customCategory = PrivateContactService.UserCategories.FirstOrDefault(u => u.Id == customCategoryId)?.Name;
                }
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            contact = await PrivateContactService.GetContact((int)Id);
        }
    }

    protected async Task SetCategory()
    {
        if (selectedCategoryId != 0)
        {
            contact.CategoryId = await Task.FromResult(selectedCategoryId);
            selectedCategoryName = PrivateContactService.Categories.FirstOrDefault(c => c.Id == selectedCategoryId)?.Name;

            // Reset other fields based on the selected category
            switch (selectedCategoryName)
            {
                case "służbowy":
                    contact.UserCategoryId = null;
                    break;

                case "prywatny":
                    contact.UserCategoryId = null;
                    contact.SubcategoryId = null;
                    break;

                case "inny":
                    contact.SubcategoryId = null;
                    break;

                default:
                    break;
            }
        }
    }


    protected async Task SetUserCategory()
    {
        if (selectedCategoryName == "inny")
        {
            if (customCategory != null)
            {
                if (Id == null)
                {
                    await CreateNewCustomCategory();
                }
                else
                {
                    if (contact.UserCategoryId == null)
                    {
                        //Custom category doesn't existed before for this contact
                        await CreateNewCustomCategory();
                    }
                    else
                    {
                        // Custom category existed before for this contact
                        // Checking if custom category has changed
                        if (isCustomCategoryChanged())
                        {
                            // Update custom category name field
                            await PrivateContactService.UpdateUserCategory(new UserCategory { Id = customCategoryId.Value, Name = customCategory });
                        }
                    }
                }
            }
            else
            {
                throw new Exception("user category field can't be empty");
            }
        }
    }

    private async Task CreateNewCustomCategory()
    {
        try
        {
            // Creating new custom category
            createdCustomCategoryId = await PrivateContactService.CreateNewCategory(
                new UserCategory { Name = customCategory }
            );

            // Adding created category Id to the created contact
            contact.UserCategoryId = createdCustomCategoryId;
        }
        catch (Exception)
        {
            throw new Exception("An error occurred while creating a new category. ");
        }
    }

    private bool isCustomCategoryChanged()
    {
        string customCategoryNameFromDb = PrivateContactService.UserCategories.FirstOrDefault(c => c.Id == customCategoryId)?.Name;
        if (customCategory.Equals(customCategoryNameFromDb))
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    async Task HandleSubmit()
    {
            await SetUserCategory();
            if (Id == null)
            {
                await PrivateContactService.CreateContact(contact);
            }
            else
            {
                await PrivateContactService.UpdateContact(contact);
            }
    }

    async Task DeleteContact()
    {
        try
        {
            await PrivateContactService.DeleteContact(contact.Id);

            // Check if UserCategoryId has a value before calling DeleteUserCategory
            if (customCategoryId.HasValue)
            {
                await PrivateContactService.DeleteUserCategory(customCategoryId.Value);
            }
        }
        catch (Exception)
        {
            throw new Exception("An error occurred while deleting a contact.");
        }
    }
}